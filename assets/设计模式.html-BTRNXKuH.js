import{_ as a,r as t,o as e,c as p,b as o,a as n,e as c}from"./app-C32PFIio.js";const l={},i=n("h1",{id:"常用设计模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#常用设计模式"},[n("span",null,"常用设计模式")])],-1),u=c(`<h2 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式"><span>创建型模式</span></a></h2><blockquote><p>创建型模式（Creational）是一种设计模式类别，用于解决与对象创建情况相关的常见问题。</p></blockquote><h3 id="单例模式" tabindex="-1"><a class="header-anchor" href="#单例模式"><span>单例模式</span></a></h3><blockquote><p>限定对象的实例只有一个。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Singleton<span class="token punctuation">.</span>instance <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> Singleton<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        Singleton<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1 <span class="token operator">===</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h4><p>全局弹窗 / Vuex</p><h3 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h3><blockquote><p>工厂模式是一种根据参数的不同创建不同对象的模式。<br> 在前端开发中，常用于创建不同类型的组件、插件等.。<br> 工厂模式可以将对象的创建和使用分离，提高代码的灵活性和可维护性。</p></blockquote><blockquote><p>通过子类判断需要生成的对象类型，然后创建该对象。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">createType</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&quot;A&quot;</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TypeA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&quot;B&quot;</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TypeB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TypeC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">TypeA</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">TypeB</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">TypeC</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> typeA <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createType</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> typeB <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createType</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> typeC <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createType</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeA<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeB<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// B</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>typeC<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="应用场景-1" tabindex="-1"><a class="header-anchor" href="#应用场景-1"><span>应用场景：</span></a></h4><p>UI组件库中的组件创建。<br> 数据模型的创建。</p><h3 id="原型模式" tabindex="-1"><a class="header-anchor" href="#原型模式"><span>原型模式</span></a></h3><blockquote><p>原型模式（Prototype）是创建型模式，用于复制对象。基于具有默认属性值的现有对象创建新对象</p></blockquote><p>javascript就是一种基于原型的语言。</p><h2 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式"><span>结构型模式</span></a></h2><blockquote><p>结构型模式是一种设计模式类别，用于解决对象和类场景的组合相关的常见问题。</p></blockquote><h3 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式"><span>适配器模式</span></a></h3><blockquote><p>将不同接口转换成统一接口的模式, 在前端的领域常见的是实现不同浏览器/平台的接口统一，如 Uniapp 的一套开发，多平台发布。</p></blockquote><h4 id="应用场景-2" tabindex="-1"><a class="header-anchor" href="#应用场景-2"><span>应用场景</span></a></h4><p>在Uniapp封装Uni.request成axios风格</p><h3 id="代理模式" tabindex="-1"><a class="header-anchor" href="#代理模式"><span>代理模式</span></a></h3><blockquote><p>代理模式通过引入一个代理对象来控制对原对象的访问。代理对象在客户端和目标对象之间充当中介，负责将客户端的请求转发给目标对象，同时可以在转发请求前后进行额外的处理。</p></blockquote><p>为什么要使用代理模式?<br><strong>中介隔离作用</strong>：在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，其特征是代理类和委托类实现相同的接口。<br><strong>开闭原则，增加功能</strong>：代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。</p><h2 id="行为型模式" tabindex="-1"><a class="header-anchor" href="#行为型模式"><span>行为型模式</span></a></h2><h3 id="观察者模式" tabindex="-1"><a class="header-anchor" href="#观察者模式"><span>观察者模式</span></a></h3><blockquote><p>创建了对象间的一种一对多的依赖关系，当一个对象状态改变时，所有依赖于它的对象都会得到通知并自动更新。</p></blockquote><h4 id="应用场景-3" tabindex="-1"><a class="header-anchor" href="#应用场景-3"><span>应用场景</span></a></h4><blockquote><p>当一个对象的状态变化需要同时更新其他对象时</p></blockquote><h3 id="策略模式" tabindex="-1"><a class="header-anchor" href="#策略模式"><span>策略模式</span></a></h3><blockquote><p>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。<br> 使用策略模式可以消除代码中大量的条件分支判断。</p></blockquote><h4 id="应用场景-4" tabindex="-1"><a class="header-anchor" href="#应用场景-4"><span>应用场景</span></a></h4><p>复杂业务情况下条件分支比较多，每个条件分支处理方式不一样，可以通过策略模式简化代码。</p><p>场景一：<br> 如订单中有不同的订单类型，如某个订单需要先支付，然后再发货，另一个订单直接发货。还要根据不同平台（H5、小程序、APP）进行不同的处理。这种情况下使用策略模式，将订单类型、支付类型、发货类型、平台类型作为策略，将订单处理方式作为策略实现。</p><p>场景二：<br> 表单验证：表单验证是前端开发中常见的需求，通过策略模式，将不同的验证规则封装成策略，将验证方式作为策略实现。</p>`,36);function r(k,d){const s=t("PostInfo");return e(),p("div",null,[i,o(s),u])}const b=a(l,[["render",r],["__file","设计模式.html.vue"]]),h=JSON.parse('{"path":"/blog/js%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","author":"清咖","date":"2024-06-10","poster":"/images/poster/design-model.png","category":"js基础"},"headers":[{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[{"level":3,"title":"单例模式","slug":"单例模式","link":"#单例模式","children":[]},{"level":3,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":3,"title":"原型模式","slug":"原型模式","link":"#原型模式","children":[]}]},{"level":2,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[{"level":3,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[]},{"level":3,"title":"代理模式","slug":"代理模式","link":"#代理模式","children":[]}]},{"level":2,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[{"level":3,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":3,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]}]}],"git":{"updatedTime":1719893891000,"contributors":[{"name":"清咔","email":"874518796@qq.com","commits":1}]},"filePathRelative":"blog/js基础/设计模式/设计模式.md"}');export{b as comp,h as data};
