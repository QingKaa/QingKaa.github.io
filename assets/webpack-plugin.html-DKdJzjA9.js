import{_ as l,r as e,o,c as i,b as s,a,d as n,e as p}from"./app-CCbP4G38.js";const r={},k=a("h1",{id:"webpack插件",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#webpack插件"},[a("span",null,"webpack插件")])],-1),u=p(`<h2 id="webpack插件是什么" tabindex="-1"><a class="header-anchor" href="#webpack插件是什么"><span>webpack插件是什么</span></a></h2><blockquote><p>webpack 插件是一个具有 apply 方法的 JavaScript 对象。apply 方法会被 webpack compiler 调用，并且在<strong>整个</strong>编译生命周期都可以访问 compiler 对象。</p></blockquote><p><strong>Compiler</strong><br> 是 webpack 的主要引擎，它通过 CLI 或者 Node API 传递的所有选项创建出一个 compilation 实例。 它扩展（extends）自 Tapable 类，用来注册和调用插件。</p><p><code>ConsoleLogOnBuildWebpackPlugin.js</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pluginName <span class="token operator">=</span> <span class="token string">&#39;ConsoleLogOnBuildWebpackPlugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ConsoleLogOnBuildWebpackPlugin</span> <span class="token punctuation">{</span>
  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token parameter">compiler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    compiler<span class="token punctuation">.</span>hooks<span class="token punctuation">.</span>run<span class="token punctuation">.</span><span class="token function">tap</span><span class="token punctuation">(</span>pluginName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">compilation</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;webpack 构建正在启动！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> ConsoleLogOnBuildWebpackPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack在执行插件的apply方法时候会传入一个 compiler 对象，这个compiler对象上会暴露webpack构建阶段不同节点的hook，还有其他一些东西。</p><h2 id="插件能做什么" tabindex="-1"><a class="header-anchor" href="#插件能做什么"><span>插件能做什么</span></a></h2><p>webpack通过插件机制，可以灵活的实现各种拓展功能，例如:打包优化，资源管理，注入环境变量等。<br> 在编译的每个阶段中，插件都拥有对 compiler 对象的完全访问能力， 并且在合适的时机，还可以访问当前的 compilation 对象。</p><h2 id="webpack通过什么实现插件机制" tabindex="-1"><a class="header-anchor" href="#webpack通过什么实现插件机制"><span>webpack通过什么实现插件机制</span></a></h2>`,9),d={href:"https://github.com/webpack/tapable",target:"_blank",rel:"noopener noreferrer"},b=a("br",null,null,-1),h=p('<h2 id="从webpack构建流程" tabindex="-1"><a class="header-anchor" href="#从webpack构建流程"><span>从webpack构建流程</span></a></h2><p>=&gt; 初始化配置<br> =&gt; 从入口模块开始解析<br> =&gt; loader处理<br> =&gt; 遍历ast<br> =&gt; 找到依赖 =&gt; 继续解析依赖,直到所有的子模块都解析完成 =&gt; 生成assets =&gt; 根据assets生成最终的产物</p><h2 id="插件的分类" tabindex="-1"><a class="header-anchor" href="#插件的分类"><span>插件的分类</span></a></h2><h2 id="webpack的大致流程" tabindex="-1"><a class="header-anchor" href="#webpack的大致流程"><span>webpack的大致流程</span></a></h2>',4);function m(w,g){const t=e("PostInfo"),c=e("ExternalLinkIcon");return o(),i("div",null,[k,s(t),u,a("p",null,[n("webpack的插件机制主要是通过 "),a("a",d,[n("tapable"),s(c)]),n(" 这个库来实现的。"),b,n(" tapable 对外暴露了 tap，tapAsync 和 tapPromise 等方法， 插件可以使用这些方法向 webpack 中注入自定义构建的步骤，这些步骤将在构建过程中触发。")]),h])}const _=l(r,[["render",m],["__file","webpack-plugin.html.vue"]]),f=JSON.parse('{"path":"/webpack/webpack-plugin.html","title":"webpack插件","lang":"zh-CN","frontmatter":{"title":"webpack插件","date":"2024-04-25","tags":["webpack"],"author":"qingka"},"headers":[{"level":2,"title":"webpack插件是什么","slug":"webpack插件是什么","link":"#webpack插件是什么","children":[]},{"level":2,"title":"插件能做什么","slug":"插件能做什么","link":"#插件能做什么","children":[]},{"level":2,"title":"webpack通过什么实现插件机制","slug":"webpack通过什么实现插件机制","link":"#webpack通过什么实现插件机制","children":[]},{"level":2,"title":"从webpack构建流程","slug":"从webpack构建流程","link":"#从webpack构建流程","children":[]},{"level":2,"title":"插件的分类","slug":"插件的分类","link":"#插件的分类","children":[]},{"level":2,"title":"webpack的大致流程","slug":"webpack的大致流程","link":"#webpack的大致流程","children":[]}],"git":{"updatedTime":1714296984000,"contributors":[{"name":"清咔","email":"874518796@qq.com","commits":1}]},"filePathRelative":"webpack/webpack-plugin.md"}');export{_ as comp,f as data};
