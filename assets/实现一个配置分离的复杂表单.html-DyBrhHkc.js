import{_ as e,r as s,o as c,c as l,b as a,a as n,d as t,e as i}from"./app-aWihxySj.js";const u="/images/uniapp_table/poster.jpg",r="/images/uniapp_table/example1.png",k="/images/uniapp_table/example2.png",d="/images/uniapp_table/example3.png",m="/images/uniapp_table/result1.jpg",v="/images/uniapp_table/tableconfig1.jpg",b="/images/uniapp_table/list-autoShowItems.jpg",y={},g=n("h1",{id:"实现一个配置分离的复杂表单",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实现一个配置分离的复杂表单"},[n("span",null,"实现一个配置分离的复杂表单")])],-1),h=i('<p><img src="'+u+'" alt="1655259403035"></p><blockquote><p>示例使用<code>uniApp</code>开发</p></blockquote><h2 id="主要功能" tabindex="-1"><a class="header-anchor" href="#主要功能"><span>主要功能</span></a></h2><ul><li>表单通过单独文件配置，按规定格式配置即可自动生成表单输入项。</li><li>可控制表单输入类型：文本输入(可限制输入类型如<code>number</code>、<code>text</code>)、单选、颜色选择、<code>checkbox</code>(布尔类型控制)。</li><li>支持配置默认值、<code>placeholder</code>、字段提示文字(弹窗显示)</li><li>可单独控制是否显示，也可设置联动显示(根据某一字段的值控制是否显示)</li><li>精准追查到每一项的改动。</li></ul><p><strong>！！！请不要用到生产环境中，只是一个小Demo，功能上会有不完整，不会涵盖到所有的输入类型，输入校验也没有。</strong></p><h1 id="先上示例图" tabindex="-1"><a class="header-anchor" href="#先上示例图"><span>先上示例图：<br><img src="'+r+'" alt="示例1"></span></a></h1><hr><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span><img src="'+k+'" alt="示例2"></span></a></h1><hr><h1 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span><img src="'+d+'" alt="示例3"></span></a></h1><hr><h2 id="生成的结果" tabindex="-1"><a class="header-anchor" href="#生成的结果"><span>生成的结果</span></a></h2><p>导出结果的数据结构如下： <img src="'+m+`" alt="结果"></p><h2 id="部分表单配置项" tabindex="-1"><a class="header-anchor" href="#部分表单配置项"><span>部分表单配置项</span></a></h2><p>考虑到当表单项太多情况下放到一起会显得太用臃肿，采用分组的形式。<br> 分组可单独控制是否显示， <code>key</code>是最后生成结果的对象键，对应上面结果的 <code>nameOpt</code><br> 分组中每一项的配置以数组形式保存在<code>nameOpt.configOpt</code>中</p><ul><li>label: 显示的名称</li><li>isShow: 控制当前项是否显示</li><li>name: 生成配置的键</li><li>value: 当前值 为<code>null</code>时 最后的结果取 <code>default</code>的值</li><li>default: 默认值</li><li>type: 表单类型（目前定义有 Boolean, Input, Color, Radio）</li><li>root：导出在 <code>root</code>的对象下，加入这个可以使当前项显示在当前分组下，最后导出结果时却在其他的对象下(跨分组甚至独立出来)</li><li>fieldInfo： 字段提示文字（设置了这个表单右侧会有个问号，点击会弹窗显示这个里面的东东）</li><li>fieldType： <code>type = Input</code>时生效，指定输入框的类型</li><li>placeholder： <code>placeholder</code>不解释</li><li>radioList： <code>type = Radio</code>时生效，可选择的列表</li><li>showWhen: <code>Array&lt;Object&gt;</code> : 联动控制是否显示（根据其他项的值控制是否显示本项，可 n 对 一, 可跨分组控制） <ul><li>以下示例配置中<code>showWhen</code>中的每一项：<code>optKey</code>：控制项的分组<code>key</code>，<code>root</code>：控制项的<code>root</code>, <code>name</code>:控制项的<code>name</code>,<code>value</code>:控制项中值在<code>value</code>中存在则显示。</li></ul></li></ul><p>以下是一个分组的配置。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> nameOpt <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;标题配置&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">isShow</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;nameOpt&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">configOpt</span><span class="token operator">:</span> <span class="token punctuation">[</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;是否展示&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">isShow</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Boolean&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;nameOpt&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fieldInfo</span><span class="token operator">:</span> <span class="token string">&#39;是否展示标题&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;标题文字&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">isShow</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;nameOpt&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Input&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fieldType</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">placeholder</span><span class="token operator">:</span> <span class="token string">&#39;标题文字&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;是否加粗&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">isShow</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;bold&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;nameOpt&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Boolean&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;文字颜色&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">isShow</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;#ffffff&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;nameOpt&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Color&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">fieldType</span><span class="token operator">:</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">placeholder</span><span class="token operator">:</span><span class="token string">&#39;#ffffff&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">{</span>
			<span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&quot;对齐方式&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">isShow</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
			<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;align&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;center&quot;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;Radio&quot;</span><span class="token punctuation">,</span>
			<span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;nameOpt&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">placeholder</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">radioList</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;左&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;居中&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;center&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;右&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;right&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">showWhen</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                    <span class="token literal-property property">optKey</span><span class="token operator">:</span> <span class="token string">&#39;tableColumnOpt&#39;</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&#39;tableColumnOpt&#39;</span><span class="token punctuation">,</span> 
                    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;columnFmt&#39;</span><span class="token punctuation">,</span> 
                    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;currency&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;percentage&#39;</span><span class="token punctuation">]</span>
                <span class="token punctuation">}</span>
			<span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现思路" tabindex="-1"><a class="header-anchor" href="#实现思路"><span>实现思路</span></a></h2><p><strong>初始化过程</strong><br> 初始配置数据： <img src="`+v+'" alt="初始数据"></p><ol><li>拿到配置的数据，遍历分组转换成数组的形式，同时遍历分组中的<code>configOpt</code>,将存在<code>showWhen</code>的缓存到 <code>this.autoShowItems</code>数组中（方便以后某一项改变时触发是否显示会用到，先缓存起来）。 最终得到的列表数据(<code>editList</code>)与需要根据其他项控制是否显示的数组(autoShowItems)：<br><img src="'+b+`" alt="1655256344746">。</li><li>根据 <code>autoShowItems</code>处理对应项是否显示状态(避免初始化状态错乱)。</li><li>根据列表数据(<code>editList</code>)生成结果集</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 初始化</span>
<span class="token function">initConfigList</span><span class="token punctuation">(</span><span class="token parameter">tableConfig</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 配置数据</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39; =====&gt; tableConfig&#39;</span><span class="token punctuation">,</span> tableConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>autoShowItems <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoShowItems<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// 将配置对象装换成数组，并保存所有autoShowItem 对象信息</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>tableConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">tKey</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tableConfig<span class="token punctuation">[</span>tKey<span class="token punctuation">]</span><span class="token punctuation">)</span>
        tableConfig<span class="token punctuation">[</span>tKey<span class="token punctuation">]</span><span class="token punctuation">.</span>configOpt<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cItem</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>cItem<span class="token punctuation">.</span>showWhen<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoShowItems<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>cItem<span class="token punctuation">,</span> <span class="token literal-property property">selfOptKey</span><span class="token operator">:</span> tableConfig<span class="token punctuation">[</span>tKey<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token comment">// 处理自动显示/隐藏的项</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>autoShowItems<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> changeItem <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">cItem</span> <span class="token operator">=&gt;</span> cItem<span class="token punctuation">.</span>key <span class="token operator">===</span> item<span class="token punctuation">.</span>selfOptKey<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>changeItem<span class="token punctuation">)</span> <span class="token keyword">return</span>
        <span class="token keyword">let</span> changeOptItem <span class="token operator">=</span> changeItem<span class="token punctuation">.</span>configOpt<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">cItem</span> <span class="token operator">=&gt;</span> cItem<span class="token punctuation">.</span>root <span class="token operator">==</span> item<span class="token punctuation">.</span>root <span class="token operator">&amp;&amp;</span> cItem<span class="token punctuation">.</span>name <span class="token operator">==</span> item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>changeOptItem<span class="token punctuation">)</span> <span class="token keyword">return</span>
        <span class="token keyword">let</span> isShow <span class="token operator">=</span> <span class="token boolean">false</span>
        item<span class="token punctuation">.</span>showWhen<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sItem</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token punctuation">{</span> optKey<span class="token punctuation">,</span> root<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">}</span> <span class="token operator">=</span> sItem
            <span class="token keyword">const</span> decisionItem <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">lItem</span> <span class="token operator">=&gt;</span> lItem<span class="token punctuation">.</span>key <span class="token operator">===</span> optKey<span class="token punctuation">)</span>
            <span class="token keyword">let</span> decCitem <span class="token operator">=</span> decisionItem<span class="token punctuation">.</span>configOpt<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">cItem</span> <span class="token operator">=&gt;</span> cItem<span class="token punctuation">.</span>root <span class="token operator">==</span> root <span class="token operator">&amp;&amp;</span> cItem<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>decCitem<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> isShow <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        changeOptItem<span class="token punctuation">.</span>isShow <span class="token operator">=</span> isShow
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39; =====&gt; list&#39;</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39; =====&gt; this.autoShowItems&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoShowItems<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>editList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>list<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token doc-comment comment">/**
 * 初始化，根据配置列表生成配置对象
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span> 
 */</span>
<span class="token function">initResultObj</span><span class="token punctuation">(</span><span class="token parameter">editList</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resultObj <span class="token operator">=</span> editList<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        item<span class="token punctuation">.</span>configOpt<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">it</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>it<span class="token punctuation">.</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span> obj<span class="token punctuation">[</span>it<span class="token punctuation">.</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
            obj<span class="token punctuation">[</span>it<span class="token punctuation">.</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>it<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> it<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                it<span class="token punctuation">.</span>default <span class="token operator">:</span>
                it<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> obj
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39; =====&gt; this.resultObj&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resultObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>改变表单项</strong><br> 监听每个表单项改变的事件，更新结果集对应的项，并且检查是否在<code>autoShowItems</code>数组中，动态改变对应项的<code>isShow</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">onFormItemChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateConfigObj</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>item<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkShowWhen</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 更新某一项</span>
<span class="token function">updateConfigObj</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> root<span class="token punctuation">,</span> value<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> item
    <span class="token keyword">this</span><span class="token punctuation">.</span>resultObj<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39; 数据已更新 =====&gt; this.resultObj&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resultObj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> 当前更新项 =====&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>root<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">],更新值为：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkShowWhen</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 检查当前更新项是否会影响到 自动更新的项</span>
<span class="token function">checkShowWhen</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>autoShowItems <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoShowItems<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>autoShowItems<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">it</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 找到当前元素</span>
        <span class="token keyword">let</span> actOpt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>editList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">iit</span> <span class="token operator">=&gt;</span> iit<span class="token punctuation">.</span>key <span class="token operator">===</span> it<span class="token punctuation">.</span>selfOptKey<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>actOpt<span class="token punctuation">)</span> <span class="token keyword">return</span> 
        <span class="token keyword">let</span> changedItem <span class="token operator">=</span> actOpt<span class="token punctuation">.</span>configOpt<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">cItem</span> <span class="token operator">=&gt;</span> cItem<span class="token punctuation">.</span>root <span class="token operator">==</span> it<span class="token punctuation">.</span>root <span class="token operator">&amp;&amp;</span> cItem<span class="token punctuation">.</span>name <span class="token operator">==</span> it<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>changedItem<span class="token punctuation">)</span> <span class="token keyword">return</span>
        <span class="token keyword">let</span> isShow <span class="token operator">=</span> <span class="token boolean">false</span>
        it<span class="token punctuation">.</span>showWhen<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">sItem</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> <span class="token punctuation">{</span> optKey<span class="token punctuation">,</span> root<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">}</span> <span class="token operator">=</span> sItem
            <span class="token keyword">const</span> decisionItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>editList<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">lItem</span> <span class="token operator">=&gt;</span> lItem<span class="token punctuation">.</span>key <span class="token operator">===</span> optKey<span class="token punctuation">)</span>
            <span class="token keyword">let</span> decCitem <span class="token operator">=</span> decisionItem<span class="token punctuation">.</span>configOpt<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">cItem</span> <span class="token operator">=&gt;</span> cItem<span class="token punctuation">.</span>root <span class="token operator">==</span> root <span class="token operator">&amp;&amp;</span> cItem<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>decCitem<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> isShow <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        changedItem<span class="token punctuation">.</span>isShow <span class="token operator">=</span> isShow
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),f={href:"https://gitcode.net/weixin_39182097/configTable",target:"_blank",rel:"noopener noreferrer"};function w(I,_){const p=s("PostInfo"),o=s("ExternalLinkIcon");return c(),l("div",null,[g,a(p),h,n("p",null,[t("源码已发布到 "),n("a",f,[t("gitCode"),a(o)])])])}const S=e(y,[["render",w],["__file","实现一个配置分离的复杂表单.html.vue"]]),j=JSON.parse('{"path":"/blog/uniApp/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E5%88%86%E7%A6%BB%E7%9A%84%E5%A4%8D%E6%9D%82%E8%A1%A8%E5%8D%95.html","title":"实现一个配置分离的复杂表单","lang":"zh-CN","frontmatter":{"title":"实现一个配置分离的复杂表单","date":"2022-06-15","poster":"/images/uniapp_table/poster.jpg","imgDir":"uniapp_table","tags":["uniapp"],"isPost":true,"author":"清咖","category":"uniApp"},"headers":[{"level":2,"title":"主要功能","slug":"主要功能","link":"#主要功能","children":[]},{"level":2,"title":"生成的结果","slug":"生成的结果","link":"#生成的结果","children":[]},{"level":2,"title":"部分表单配置项","slug":"部分表单配置项","link":"#部分表单配置项","children":[]},{"level":2,"title":"实现思路","slug":"实现思路","link":"#实现思路","children":[]}],"git":{"updatedTime":1713346575000,"contributors":[{"name":"清咔","email":"874518796@qq.com","commits":2}]},"filePathRelative":"blog/uniApp/实现一个配置分离的复杂表单.md"}');export{S as comp,j as data};
