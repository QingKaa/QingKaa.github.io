import{_ as p,r as s,o,c,b as a,a as n,d as l,e as i}from"./app-OdtGcBzi.js";const r="/assets/1-CJsBHNUC.png",d="/assets/2-BxR1dMaY.png",u="/assets/3-BMyuRJeg.png",k="/assets/4-cLcvb3Gg.png",m={},v=n("h1",{id:"赋值运算符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#赋值运算符"},[n("span",null,"赋值运算符")])],-1),g=n("p",null,"一个有意思的题目，来源：",-1),b={href:"https://juejin.cn/post/7370275556904468489",target:"_blank",rel:"noopener noreferrer"},x=i(`<p>代码如下:</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// 题目一</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> 
<span class="token keyword">var</span> b <span class="token operator">=</span> a
a<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;  =====&gt; a.x:&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;  =====&gt; b:&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问输出结果。</p><ul><li><p>查看输出结果</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">//  log info </span>
<span class="token comment">// =====&gt; a.x: undefined</span>
<span class="token comment">// =====&gt; b: { n: 1, x: { n: 2 } }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>文中表述的非常清楚，这里简单描述一下处理过程：</p><p>通常来说大家都知道的</p><blockquote><p>赋值运算符 <code>=</code> 用于将右侧表达式的值赋给左侧的变量</p></blockquote><p>更详细的步骤如下：</p><ol><li>找到变量 <code>a</code> 的内存地址中的<code>a.x</code>,自动分配内存空间，准备赋值。</li><li>运算 <code>=</code> <strong>右侧</strong>表达式的代码，得到要赋值的数据。</li><li>将右侧运算的数据放入之前找到的内存地址</li><li>返回整个表达式的结果，即左侧变量的新值。</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> 
<span class="token keyword">var</span> b <span class="token operator">=</span> a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>会形成以下这样的内存结果：</p><p><img src="`+r+'" alt="Untitled"></p><p><code>a.x = a = { n: 2}</code> 这是一个连续的赋值操作</p><p>先找到a中存储的内存地址，a.x 不存在，会自动分配空间</p><p><img src="'+d+'" alt="Untitled"></p><p>然后 <code>a.x =</code> 右侧是 <code>a = { n: 2}</code> ,a 是重新创建一个内存空间，如图</p><p><img src="'+u+'" alt="Untitled"></p><p><code>a = { n: 2 }</code> 返回的是<code>a</code>当前存放的指针，然后将这个指针赋值给 <code>a.x</code> , a.x 是上一步分配的内存空间，最终会形成如下</p><p><img src="'+k+`" alt="Untitled"></p><p>所以最后 a 和 b 是这个样子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token operator">===</span><span class="token operator">==</span><span class="token operator">&gt;</span> a<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>
  <span class="token operator">===</span><span class="token operator">==</span><span class="token operator">&gt;</span> b<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一句话的流程是：1 先取等号左边的空间 ⇒ 2 计算等号右侧的表达式返回 ⇒ 右侧还是一个赋值运算 ⇒ 重复 1，2 ⇒ 将右侧的赋值给左边的内存空间；</p><p>变种：</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token comment">// 称呼这里的内存空间为对象1</span>
c<span class="token punctuation">.</span>x <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment">// 称呼这里的内容空间为对象2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;  =====&gt; c:&#39;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;  =====&gt; c.x:&#39;</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 先取 c.x 的内存地址 =&gt; </span>
<span class="token comment">// 	计算右侧 c =&gt; { n: 2 } =&gt; </span>
<span class="token comment">// 	还是赋值运算：</span>
<span class="token comment">// 		取 c 的内存地址 =&gt; </span>
<span class="token comment">// 		计算右侧的返回是一个对象 { n: 2}		</span>
<span class="token comment">// 		赋值给 c =&gt;</span>
<span class="token comment">// 	将c的内存地址赋值给 c.x, 此时 c.x 的对象1的属性（可以理解成是旧的，因为上一步已经把 c 的指针设置成对象2</span>

<span class="token comment">// 这里与上一代码的区别是对象1的空间因为没有被引用，所以会被回收掉,而此时c已经指向了对象2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>查看结果</p><div class="language-jsx line-numbers-mode" data-ext="jsx" data-title="jsx"><pre class="language-jsx"><code><span class="token comment">// =====&gt; c: { n: 2 }</span>
<span class="token comment">// =====&gt; c.x: undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>`,25);function _(j,h){const e=s("PostInfo"),t=s("ExternalLinkIcon");return o(),c("div",null,[v,a(e),g,n("p",null,[n("a",b,[l("带你迈过js赋值运算的坑(掘金)"),a(t)])]),x])}const f=p(m,[["render",_],["__file","赋值运算符.html.vue"]]),E=JSON.parse('{"path":"/blog/js%E5%9F%BA%E7%A1%80/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6.html","title":"赋值运算符","lang":"zh-CN","frontmatter":{"title":"赋值运算符","date":"2024-05-22","author":"清咖","poster":"/images/poster/a_poster.jpg","category":"js基础"},"headers":[],"git":{"updatedTime":1717466371000,"contributors":[{"name":"清咔","email":"874518796@qq.com","commits":1}]},"filePathRelative":"blog/js基础/赋值运算符/赋值运算符.md"}');export{f as comp,E as data};
